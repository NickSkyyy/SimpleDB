package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    private JoinPredicate p;
    private TupleDesc td;
    private OpIterator it1, it2;

    private int curTuple;
    private List<Tuple> tuples;

    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        // some code goes here
        this.p = p;
        it1 = child1;
        it2 = child2;
        curTuple = -1;
        // set new td
        TupleDesc td1 = it1.getTupleDesc(), td2 = it2.getTupleDesc();
        if (td1 == null && td2 == null)
            td = null;
        else
        {
            int len;
            if (td1 == null)
                len = td2.numFields();
            else if (td2 == null)
                len = td1.numFields();
            else
                len = td1.numFields() + td2.numFields();
            Type[] typeAr = new Type[len];
            String[] fieldAr = new String[len];
            int poi = 0;
            if (td1 != null)
                for (int i = 0; i < td1.numFields(); i++) {
                    typeAr[poi] = td1.getFieldType(i);
                    fieldAr[poi] = td1.getFieldName(i);
                    poi++;
                }
            if (td2 != null)
                for (int i = 0; i < td2.numFields(); i++) {
                    typeAr[poi] = td2.getFieldType(i);
                    fieldAr[poi] = td2.getFieldName(i);
                    poi++;
                }
            td = new TupleDesc(typeAr, fieldAr);
        }
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return p;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // some code goes here
        return it1.getTupleDesc().getFieldName(p.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
        return it2.getTupleDesc().getFieldName(p.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        return td;
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
        it1.open();
        it2.open();
        super.open();
    }

    public void close() {
        // some code goes here
        super.close();
        it2.close();
        it1.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
        it1.rewind();
        it2.rewind();
        curTuple = -1;
    }

    private Tuple merge(Tuple t1, Tuple t2) {
        Tuple temp = new Tuple(td);
        int p = 0;
        for (int i = 0; i < t1.getTupleDesc().numFields(); i++)
            temp.setField(p++, t1.getField(i));
        for (int i = 0; i < t2.getTupleDesc().numFields(); i++)
            temp.setField(p++, t2.getField(i));
        return temp;
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
        if (curTuple != -1)
            return ++curTuple < tuples.size() ? tuples.get(curTuple) : null;
        if (tuples == null)
            tuples = new ArrayList<>();
        while (it1.hasNext()) {
            Tuple t1 = it1.next();
            while (it2.hasNext()) {
                Tuple t2 = it2.next();
                if (p.filter(t1, t2))
                    tuples.add(merge(t1, t2));
            }
            it2.rewind();
        }
        if (tuples == null) return null;
        return ++curTuple < tuples.size() ? tuples.get(curTuple) : null;
    }

    @Override
    public OpIterator[] getChildren() {
        // some code goes here
        return null;
    }

    @Override
    public void setChildren(OpIterator[] children) {
        // some code goes here
    }

}
